A lot of stuff in this config is based on [[https://github.com/sethm/emacs-files/blob/master/configuration.org][sethm's config]].

* Basic stuff
** Native compilation
#+BEGIN_SRC emacs-lisp
(when (and (fboundp #'native-comp-available-p)
           (native-comp-available-p)
           (functionp #'json-serialize))
  (setq comp-deferred-compilation t))
#+END_SRC
** Where to store files generated by emacs
#+BEGIN_SRC emacs-lisp
(if (not (file-exists-p "~/.local/share/emacs"))
    (make-directory "~/.loacl/share/emacs/" t))
(let ((local-custom-file "~/.local/share/emacs/custom.el"))
 (when (not (file-exists-p local-custom-file))
   (write-region "" nil local-custom-file))
 (setq custom-file local-custom-file)
 (load custom-file))
#+END_SRC
** Reduce UI clutter
#+BEGIN_SRC emacs-lisp
(setq warning-minimum-level :emergency
      inhibit-startup-message t
      inhibit-splash-screen t)
(tool-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC
** Local lisp directory
#+BEGIN_SRC emacs-lisp
(if (not (file-exists-p "~/.local/share/emacs//lisp/"))
    (make-directory "~/.local/share/emacs/lisp/" t))
(let ((default-directory  "~/.local/share/emacs/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC
* Some options
** Better defaults
*** Take space from all windows whenever we split one
#+BEGIN_SRC emacs-lisp
(setq-default window-combination-resize)
#+END_SRC
*** Stretch cursor to the full glyph cell
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC
** Long line improvements
*** We only use left-to-right text
#+BEGIN_SRC emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)
#+END_SRC
** Tidying up the working directory
*** Don't litter the working directory with backup files
#+BEGIN_SRC emacs-lisp
(if (not (file-exists-p "~/.local/share/emacs/backups/"))
    (make-directory "~/.loacl/share/emacs/backups/" t))
(setq backup-directory-alist
      '(("." . "~/.local/share/emacs/backups/")))
(setq auto-save-file-name-transforms
      '((".*" "~/.local/share/emacs/backups/" t)))
(setq backup-by-copying t)
(setq auto-save-default t)
#+END_SRC
*** Limit the number of backup files
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2)
#+END_SRC
*** Lockfiles are annoying
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
** TODO Spellcheck

** Tramp
Allows you to edit files remotely.
*** Enable tramp
#+BEGIN_SRC emacs-lisp
(require 'tramp)
#+END_SRC
*** Set some basic tramp options
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh"
    max-lisp-eval-depth 10000 ;; default is 600
    max-specpdl-size 13000) ;; default is 1300
#+END_SRC
** Exec path
If certain directories exist, they should be added to ~exec-path~, and the ~PATH~ environment variable.
#+BEGIN_SRC emacs-lisp
(setq loomcom-append-to-path
      '("/usr/local/bin"
        "/opt/homebrew/bin"
        "/opt/homebrew/opt/llvm/bin"
        "~/bin"
        "~/.local/bin"
        "/Library/TeX/texbin"
        "~/.cargo/bin"))

(mapc #'(lambda (dir)
          (when (file-exists-p (expand-file-name dir))
            ;; Add the directory to exec-path
            (add-to-list 'exec-path (expand-file-name dir))
            ;; Add the directory to the PATH environment variable, but
            ;; replace `~' with `$HOME'
            (setenv "PATH"
                    (concat (getenv "PATH")
                            (concat ":" (replace-regexp-in-string "^~" "$HOME" dir))))))
      loomcom-append-to-path)
#+END_SRC
** Easier window navigation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-n")
                #'(lambda ()
                    (interactive)
                    (ignore-errors (windmove-left))))
(global-set-key (kbd "C-e")
                #'(lambda ()
                    (interactive)
                    (ignore-errors (windmove-up))))
(global-set-key (kbd "C-i")
                #'(lambda ()
                    (interactive)
                    (ignore-errors (windmove-right))))
(global-set-key (kbd "C-o")
                #'(lambda ()
                    (interactive)
                    (ignore-errors (windmove-down))))
#+END_SRC
** Set the font
I like blex mono with a small size because I have a 1080p LG ultrawide monitor. (so pixels are big)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "BlexMono Nerd Font Mono" :height 90)
#+END_SRC
** Shortcut to reload the config
#+BEGIN_SRC emacs-lisp
(defun reload-config ()
  (interactive)
  (org-babel-load-file "~/.config/emacs/config.org"))
(global-set-key (kbd "C-c r") #'reload-config)
#+END_SRC
* Packages/Plugins
** Package management
*** Basic setup and repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-user-dir "~/.local/share/emacs/elpa/")
(setq package-enable-at-startup t)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
#+END_SRC
*** Install use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC
*** Always install packages
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC
** General
*** Theme
I use gruvbox, but you can use any theme you want.
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox-dark-medium t)
  ;; Change colors for line numbers
  (set-face-attribute 'linum nil :background "#0000" :foreground "#504945")
  (set-face-attribute 'linum-current-line nil :background "#0000")) ;; The default foreground color is nice
#+END_SRC
*** Which key
Allows you to see the available keybindings.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
** Evil mode
Evil mode is a vim emulator for emacs.
*** Install evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC
** Evil-surround
Allows you to surround text with things like quotes, brackets, etc.
~S "text object"~ to surround selected text with the text object.
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+END_SRC
** Evil-commentary
Allows you to comment out lines with ~gcc~.
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :config
  (evil-commentary-mode))
#+END_SRC
** Orgmode
*** Packages
**** org itself
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-startup-indented t)
  (setq org-hide-leading-stars t)
  (setq org-ellipsis " ↕")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  (setq org-log-done 'time)
  (setq org-todo-keywords
        '((sequence "TODO" "LATER" "DONE")))
  ;; Open files folded
  (setq org-startup-folded t)
  (setq org-hide-emphasis-markers t)
)
#+END_SRC
**** org-superstar
For prettier org bullets.
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("")))
#+END_SRC
**** org-evil
Some evil bindings for orgmode.
For example, ">" to demote a heading.
#+BEGIN_SRC emacs-lisp
(use-package org-evil
  :config
  (add-hook 'org-mode-hook #'org-evil-mode))
#+END_SRC

**** TODO svg-lib
Replace things like TODO's with SVGs to emphasize.

*** Additional shortcuts
**** TODO Reformat org file
Here we re-export the org file to format it.
** Completion engines
*** TODO Github copilot
